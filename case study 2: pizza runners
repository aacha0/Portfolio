**Schema (PostgreSQL v13)**

    CREATE SCHEMA pizza_runner;
    SET search_path = pizza_runner;
    
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    update pizza_runner.customer_orders 
    set exclusions = nullif(nullif(exclusions, ''),'null'),
    	extras = nullif(nullif(extras, ''),'null');

There are no results to be displayed.

---
**Query #2**

    update pizza_runner.runner_orders 
    set cancellation = null
    where cancellation  = 'NaN' and cancellation = 'null';

There are no results to be displayed.

---
**Query #3**

    update pizza_runner.runner_orders 
    set cancellation = nullif(nullif(cancellation,''),'null');

There are no results to be displayed.

---
**Query #4**

    update pizza_runner.runner_orders 
    set distance  = replace(distance, 'km', ''),
    	duration  = replace(replace(replace(duration, 'minutes', 	''),'minute',''),'mins','');

There are no results to be displayed.

---
**Query #5**

    select * from pizza_runner.runner_orders ;

| order_id | runner_id | pickup_time         | distance | duration | cancellation            |
| -------- | --------- | ------------------- | -------- | -------- | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20       | 32       |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20       | 27       |                         |
| 3        | 1         | 2020-01-03 00:12:37 | 13.4     | 20       |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4     | 40       |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10       | 15       |                         |
| 6        | 3         | null                | null     | null     | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25       | 25       |                         |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4     | 15       |                         |
| 9        | 2         | null                | null     | null     | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10       | 10       |                         |

---
**Query #6**

    select count(order_id) total_pizzas from pizza_runner.customer_orders;

| total_pizzas |
| ------------ |
| 14           |

---
**Query #7**

    select count(distinct order_id) total_pizzas
    from pizza_runner.customer_orders;

| total_pizzas |
| ------------ |
| 10           |

---
**Query #8**

    select 
    sum(case when cancellation is null then 1
        else 0 end) successful_orders
    from pizza_runner.runner_orders;

| successful_orders |
| ----------------- |
| 8                 |

---
**Query #9**

    select pizza_id, count(*) successful_delivered
    from pizza_runner.customer_orders c
    join pizza_runner.runner_orders r
    on c.order_id = r.order_id 
    where r.cancellation is null 
    group by pizza_id ;

| pizza_id | successful_delivered |
| -------- | -------------------- |
| 1        | 9                    |
| 2        | 3                    |

---
**Query #10**

    select customer_id, 
    sum(case when c.pizza_id = 1 then 1 else 0 end) meatlovers_pizzas_qty,
    sum(case when c.pizza_id = 2 then 1 else 0 end) vegetarian_pizzas_qty
    from pizza_runner.customer_orders c
    join pizza_runner.pizza_names p
    on c.pizza_id = p.pizza_id 
    group by customer_id
    order by customer_id;

| customer_id | meatlovers_pizzas_qty | vegetarian_pizzas_qty |
| ----------- | --------------------- | --------------------- |
| 101         | 2                     | 1                     |
| 102         | 2                     | 1                     |
| 103         | 3                     | 1                     |
| 104         | 3                     | 0                     |
| 105         | 0                     | 1                     |

---
**Query #11**

    with rank as(select order_id, count(*), 
    dense_rank() over(order by count(order_id) desc) rank
    from pizza_runner.customer_orders 
    group by order_id )
    select order_id, count as max_number_single_order 
    from rank 
    where rank = 1;

| order_id | max_number_single_order |
| -------- | ----------------------- |
| 4        | 3                       |

---
**Query #12**

    select c.customer_id,
    sum(case when exclusions is not null or extras is not null then 1 else 0 end)  at_least_one_change,
    sum(case when exclusions is null and extras is  null then 1 else 0 end) 
    no_change
    from pizza_runner.customer_orders c
    join pizza_runner.runner_orders r
    on c.order_id = r.order_id 
    where r.cancellation is null 
    group by customer_id
    order by customer_id;

| customer_id | at_least_one_change | no_change |
| ----------- | ------------------- | --------- |
| 101         | 0                   | 2         |
| 102         | 0                   | 3         |
| 103         | 3                   | 0         |
| 104         | 2                   | 1         |
| 105         | 1                   | 0         |

---
**Query #13**

    select count(*) exclusions_and_extras
    from pizza_runner.customer_orders c
    join pizza_runner.runner_orders r
    on c.order_id = r.order_id 
    where r.cancellation is null and extras is not null and exclusions is not null 
    ;

| exclusions_and_extras |
| --------------------- |
| 1                     |

---
**Query #14**

    select cast(date_trunc('hour', order_time) as time) as hour, count(*)
    from pizza_runner.customer_orders 
    group by hour 
    order by hour;

| hour     | count |
| -------- | ----- |
| 11:00:00 | 1     |
| 13:00:00 | 3     |
| 18:00:00 | 3     |
| 19:00:00 | 1     |
| 21:00:00 | 3     |
| 23:00:00 | 3     |

---
**Query #15**

    with day as(
    select*, 
    case when extract(dow from order_time) = 1 then 'Mon'
    when extract(dow from order_time) = 2 then 'Tue'
    when extract(dow from order_time) = 3 then 'Wed'
    when extract(dow from order_time) = 4 then 'Thur'
    when extract(dow from order_time) = 5 then 'Fri'
    when extract(dow from order_time) = 6 then 'Sat'
    else 'Sun' 
    end as day_of_the_week
    from pizza_runner.customer_orders )
    
    select day_of_the_week, count(*)
    from day 
    group by day_of_the_week,extract(dow from order_time) 
    order by extract(dow from order_time);

| day_of_the_week | count |
| --------------- | ----- |
| Wed             | 5     |
| Thur            | 3     |
| Fri             | 1     |
| Sat             | 5     |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/65)
