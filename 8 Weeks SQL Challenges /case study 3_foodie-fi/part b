
**Query #1**

    select count(distinct customer_id)
    from subscriptions;

| count(distinct customer_id) |
| --------------------------- |
| 1000                        |

---
**Query #2**

    select extract(month from start_date) month, count(*) count
    from subscriptions 
    where plan_id = 0
    group by month 
    order by month ;

| month | count |
| ----- | ----- |
| 1     | 88    |
| 2     | 68    |
| 3     | 94    |
| 4     | 81    |
| 5     | 88    |
| 6     | 79    |
| 7     | 89    |
| 8     | 88    |
| 9     | 87    |
| 10    | 79    |
| 11    | 75    |
| 12    | 84    |

---
**Query #3**

    select plan_name, count(*) count
    from subscriptions s 
    join plans p
    on s.plan_id = p.plan_id
    where extract(year from start_date) > 2020
    group by plan_name, s.plan_id 
    order by s.plan_id;

| plan_name     | count |
| ------------- | ----- |
| basic monthly | 8     |
| pro monthly   | 60    |
| pro annual    | 63    |
| churn         | 71    |

---
**Query #4**

    select count(distinct customer_id) num_customers,
    sum(case when plan_id = 4 then 1 else 0 end) cnt_churned_cutsomers,
    round(sum(case when plan_id = 4 then 1 else 0 end)/count(distinct customer_id)*100,1)churn_percentage 
    from subscriptions;

| num_customers | cnt_churned_cutsomers | churn_percentage |
| ------------- | --------------------- | ---------------- |
| 1000          | 307                   | 30.7             |

---
**Query #5**

    with cte as(
      select customer_id, plan_id, lead(plan_id, 1) over(partition by customer_id order by start_date) next_plan   
    from subscriptions) 
    
    select count(distinct customer_id) total_customer,  
    sum(case when plan_id = 0 and next_plan = 4 then 1 else 0 end) num_churned_after_trial,  round(sum(case when plan_id = 0 and next_plan = 4 then 1 else 0 end) / count(distinct customer_id)*100) percentage
    from cte ;

| total_customer | num_churned_after_trial | percentage |
| -------------- | ----------------------- | ---------- |
| 1000           | 92                      | 9          |

---
**Query #6**

    with cte as (
    select customer_id, plan_id, lead(plan_id, 1) over(partition by customer_id order by start_date) next_plan
    from subscriptions 
    where customer_id in (select customer_id from subscriptions where plan_id = 0))
    select plan_name, count(*) count 
    from cte c
    join plans p
    on c.next_plan = p.plan_id
    where c.plan_id =0
    group by plan_name;

| plan_name     | count |
| ------------- | ----- |
| basic monthly | 546   |
| pro monthly   | 325   |
| pro annual    | 37    |
| churn         | 92    |

---
**Query #7**

    with cte as (
    select distinct customer_id, max(s.plan_id) over(partition by customer_id order by start_date desc)  last_plan_status 
    from subscriptions s
    where start_date <= '2020-12-31')
    
    select plan_name, count(*) count, round(count(*)/(select count(customer_id) from cte)*100,2) percentage
    from cte c
    join plans p
    on c.last_plan_status = p.plan_id 
    group by plan_name 
    ;

| plan_name     | count | percentage |
| ------------- | ----- | ---------- |
| trial         | 19    | 1.90       |
| basic monthly | 224   | 22.40      |
| pro monthly   | 326   | 32.60      |
| pro annual    | 195   | 19.50      |
| churn         | 236   | 23.60      |

---
**Query #8**

    select count(*) cnt_upgrade_annual
    from subscriptions 
    where plan_id = 3 and start_date between '2020-01-01' and '2020-12-31' ;

| cnt_upgrade_annual |
| ------------------ |
| 195                |

---
 **Query #9**

    with cte as(
    select distinct customer_id, 
    max(start_date) over(partition by customer_id) max,
    min(start_date) over(partition by customer_id) min,
    datediff(max(start_date) over(partition by customer_id),min(start_date) over(partition by customer_id)) diff 
    from subscriptions 
    where customer_id in (select customer_id from subscriptions where plan_id =3) and plan_id < 4 ) 

    select round(avg(diff),2) avg_days 
    from cte ;

| avg_days |
| -------- |
| 104.62   |

---
**Query #10**

    with cte as(
      select distinct customer_id, 
      min(start_date) over(partition by customer_id) min,
      datediff(max(start_date) over(partition by customer_id),min(start_date) over(partition by customer_id)) diff 
      from subscriptions 
      where customer_id in (select customer_id from subscriptions where plan_id =3) and plan_id < 4 
    ),
    bound as(
    select *, floor(diff/30)*30 lower, 
    case when diff%30 = 0 then ceiling(diff/30)*30+30
    else ceiling(diff/30)*30 end upper
    from cte),
    period as (
      select *, concat(lower, ' - ',upper)period from bound
      ) 


    select period, count(*) cnt_upgrade_annual_plan
    from period 
    group by period,lower 
    order by lower;

| period    | cnt_upgrade_annual_plan |
| --------- | ----------------------- |
| 0 - 30    | 48                      |
| 30 - 60   | 25                      |
| 60 - 90   | 33                      |
| 90 - 120  | 35                      |
| 120 - 150 | 43                      |
| 150 - 180 | 35                      |
| 180 - 210 | 27                      |
| 210 - 240 | 4                       |
| 240 - 270 | 5                       |
| 270 - 300 | 1                       |
| 300 - 330 | 1                       |
| 330 - 360 | 1                       |

---
**Query #11**

    with cte as(
    select customer_id, start_date, plan_id,lead(plan_id, 1) over(partition by customer_id order by start_date) next_plan,
    datediff(lead(start_date, 1) over(partition by customer_id), start_date) date_diff
    from subscriptions 
    where start_date between '2020-01-01' and '2020-12-31')



    select 
    sum(case when plan_id=2 and next_plan=1 then 1 else 0 end) switch_plan, 
    sum(case when plan_id =0 and next_plan =1 and date_diff>7 then 1 else 0 end) did_not_switch_out_plan_after_trial, 
    sum(case when plan_id =0 and next_plan =1 and date_diff=7 then 1 else 0 end) switch_from_trial_to_basix
    from cte
    ;

| switch_plan | did_not_switch_out_plan_after_trial | switch_from_trial_to_basix |
| ----------- | ----------------------------------- | -------------------------- |
| 0           | 0                                   | 538                        |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/rHJhRrXy5hbVBNJ6F6b9gJ/16)
with year as (
select customer_id, s.plan_id, plan_name, start_date,price
from subscriptions s
join plans p
on s.plan_id = p.plan_id
where year(start_date) = '2020' and s.plan_id !=0  
order by customer_id, s.plan_id ),
  end_date as(
  select customer_id, plan_id, plan_name, start_date,
  case when plan_id != 4 and lead(start_date,1)over(partition by customer_id) is null then '2020-12-31' 
  else lead(start_date,1)over(partition by customer_id) end as end_date,price
from year) 

select * 
from end_date
jOIN (
        SELECT 0 as n UNION ALL
        SELECT 1 as n UNION ALL
        SELECT 2 as n UNION ALL
        SELECT 3 as n UNION ALL
        SELECT 4 as n UNION ALL
        SELECT 5 as n UNION ALL
        SELECT 6 as n UNION ALL
        SELECT 7 as n UNION ALL
        SELECT 8 as n UNION ALL
        SELECT 9 as n UNION ALL
        SELECT 10 as n UNION ALL
        SELECT 11 as n UNION ALL
        SELECT 12 as n
      ) as n
      ON n.n <= 12
