Data Cleansing 

1. Convert the week_date to a DATE format

2. Add a week_number as the second column for each week_date value, for example any value from the 1st of January to 7th of January will be 1, 8th to 14th will be 2 etc

3. Add a month_number with the calendar month for each week_date value as the 3rd column

4. Add a calendar_year column as the 4th column containing either 2018, 2019 or 2020 values

5. Add a new column called age_band after the original segment column using the following mapping on the number inside the segment value: 1-young adults, 2-middle aged, 3/4-retirees 
6. Add a new demographic column using the following mapping for the first letter in the segment values:
segment	demographic, C-Couples, F- Families

7. Ensure all null string values with an "unknown" string value in the original segment column as well as the new age_band and demographic columns

8. Generate a new avg_transaction column as the sales value divided by transactions rounded to 2 decimal places for each record

DROP TABLE IF EXISTS data_mart.clean_weekly_sales;
Create table data_mart.clean_weekly_sales(
Select 
  date(str_to_date(week_date,'%d/%m/%y')) week_date, week(str_to_date(week_date,'%d/%m/%y')) week_number, 
  month(week_date) month_number, year(str_to_date(week_date,'%d/%m/%y')) calendar_year,
  region, 
  platform, 
  coalesce(segment, 'unknown') segment, 
  case when segment like '%1' then 'Young Adults' 
  when segment like '%2' then 'Middle Aged' 
  when segment like '%3' or segment like '%4' then 'Retirees' 
  else 'unknown' end age_band,
  case when segment like 'F%' then 'Families'
  when segment like 'C%' then 'Couples'
  else 'unknown' end demographic,
  customer_type, transactions, sales,
  round(sales/transactions,2) as avg_transaction
from data_mart.weekly_sales
order by week_date
) ;
