**Schema (PostgreSQL v13)**

    CREATE SCHEMA pizza_runner;
    SET search_path = pizza_runner;
    
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    update pizza_runner.customer_orders 
    set exclusions = nullif(nullif(exclusions, ''),'null'),
    	extras = nullif(nullif(extras, ''),'null');

There are no results to be displayed.

---
**Query #2**

    update pizza_runner.runner_orders 
    set cancellation = null
    where cancellation  = 'NaN' and cancellation = 'null';

There are no results to be displayed.

---
**Query #3**

    update pizza_runner.runner_orders 
    set cancellation = nullif(nullif(cancellation,''),'null');

There are no results to be displayed.

---
**Query #4**

    update pizza_runner.runner_orders 
    set distance  = replace(distance, 'km', ''),
    	duration  = replace(replace(replace(duration, 'minutes', 	''),'minute',''),'mins','');

There are no results to be displayed.

---
**Query #5**

    select * from pizza_runner.runner_orders ;

| order_id | runner_id | pickup_time         | distance | duration | cancellation            |
| -------- | --------- | ------------------- | -------- | -------- | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20       | 32       |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20       | 27       |                         |
| 3        | 1         | 2020-01-03 00:12:37 | 13.4     | 20       |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4     | 40       |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10       | 15       |                         |
| 6        | 3         | null                | null     | null     | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25       | 25       |                         |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4     | 15       |                         |
| 9        | 2         | null                | null     | null     | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10       | 10       |                         |

---
**Query #6**

    select count(order_id) total_pizzas from pizza_runner.customer_orders;

| total_pizzas |
| ------------ |
| 14           |

---
**Query #7**

    select count(distinct order_id) total_pizzas
    from pizza_runner.customer_orders;

| total_pizzas |
| ------------ |
| 10           |

---
**Query #8**

    select 
    sum(case when cancellation is null then 1
        else 0 end) successful_orders
    from pizza_runner.runner_orders;

| successful_orders |
| ----------------- |
| 8                 |

---
**Query #9**

    select pizza_id, count(*) successful_delivered
    from pizza_runner.customer_orders c
    join pizza_runner.runner_orders r
    on c.order_id = r.order_id 
    where r.cancellation is null 
    group by pizza_id ;

| pizza_id | successful_delivered |
| -------- | -------------------- |
| 1        | 9                    |
| 2        | 3                    |

---
**Query #10**

    select customer_id, 
    sum(case when c.pizza_id = 1 then 1 else 0 end) meatlovers_pizzas_qty,
    sum(case when c.pizza_id = 2 then 1 else 0 end) vegetarian_pizzas_qty
    from pizza_runner.customer_orders c
    join pizza_runner.pizza_names p
    on c.pizza_id = p.pizza_id 
    group by customer_id
    order by customer_id;

| customer_id | meatlovers_pizzas_qty | vegetarian_pizzas_qty |
| ----------- | --------------------- | --------------------- |
| 101         | 2                     | 1                     |
| 102         | 2                     | 1                     |
| 103         | 3                     | 1                     |
| 104         | 3                     | 0                     |
| 105         | 0                     | 1                     |

---
**Query #11**

    with rank as(select order_id, count(*), 
    dense_rank() over(order by count(order_id) desc) rank
    from pizza_runner.customer_orders 
    group by order_id )
    select order_id, count as max_number_single_order 
    from rank 
    where rank = 1;

| order_id | max_number_single_order |
| -------- | ----------------------- |
| 4        | 3                       |

---
**Query #12**

    select c.customer_id,
    sum(case when exclusions is not null or extras is not null then 1 else 0 end)  at_least_one_change,
    sum(case when exclusions is null and extras is  null then 1 else 0 end) 
    no_change
    from pizza_runner.customer_orders c
    join pizza_runner.runner_orders r
    on c.order_id = r.order_id 
    where r.cancellation is null 
    group by customer_id
    order by customer_id;

| customer_id | at_least_one_change | no_change |
| ----------- | ------------------- | --------- |
| 101         | 0                   | 2         |
| 102         | 0                   | 3         |
| 103         | 3                   | 0         |
| 104         | 2                   | 1         |
| 105         | 1                   | 0         |

---
**Query #13**

    select count(*) exclusions_and_extras
    from pizza_runner.customer_orders c
    join pizza_runner.runner_orders r
    on c.order_id = r.order_id 
    where r.cancellation is null and extras is not null and exclusions is not null 
    ;

| exclusions_and_extras |
| --------------------- |
| 1                     |

---
**Query #14**

    select cast(date_trunc('hour', order_time) as time) as hour, count(*)
    from pizza_runner.customer_orders 
    group by hour 
    order by hour;

| hour     | count |
| -------- | ----- |
| 11:00:00 | 1     |
| 13:00:00 | 3     |
| 18:00:00 | 3     |
| 19:00:00 | 1     |
| 21:00:00 | 3     |
| 23:00:00 | 3     |

---
**Query #15**

    with day as(
    select*, 
    case when extract(dow from order_time) = 1 then 'Mon'
    when extract(dow from order_time) = 2 then 'Tue'
    when extract(dow from order_time) = 3 then 'Wed'
    when extract(dow from order_time) = 4 then 'Thur'
    when extract(dow from order_time) = 5 then 'Fri'
    when extract(dow from order_time) = 6 then 'Sat'
    else 'Sun' 
    end as day_of_the_week
    from pizza_runner.customer_orders )
    
    select day_of_the_week, count(*)
    from day 
    group by day_of_the_week,extract(dow from order_time) 
    order by extract(dow from order_time);

| day_of_the_week | count |
| --------------- | ----- |
| Wed             | 5     |
| Thur            | 3     |
| Fri             | 1     |
| Sat             | 5     |

---

**Schema (PostgreSQL v13)**

    CREATE SCHEMA pizza_runner;
    SET search_path = pizza_runner;
    
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    update pizza_runner.customer_orders 
        set exclusions = nullif(nullif(exclusions, ''),'null'),
        	extras = nullif(nullif(extras, ''),'null');

There are no results to be displayed.

---
**Query #2**

    update pizza_runner.runner_orders 
        set cancellation = null
        where cancellation  = 'NaN' and cancellation = 'null';

There are no results to be displayed.

---
**Query #3**

    update pizza_runner.runner_orders 
        set cancellation = nullif(nullif(cancellation,''),'null');

There are no results to be displayed.

---
**Query #4**

    update pizza_runner.runner_orders 
        set distance  = replace(distance, 'km', ''),
        	duration  = nullif(replace(replace(replace(duration, 'minutes', 	''),'minute',''),'mins',''),'null'),
            pickup_time = nullif(pickup_time,'null');

There are no results to be displayed.

---
**Query #5**

    alter table pizza_runner.runner_orders
    alter column duration type numeric using duration::numeric;

There are no results to be displayed.

---
**Query #6**

    select to_char(registration_date::date, 'ww')::int week, count(*) num_signed_up
    from pizza_runner.runners
    group by week
    order by week ;

| week | num_signed_up |
| ---- | ------------- |
| 1    | 2             |
| 2    | 1             |
| 3    | 1             |

---
**Query #7**

    with order_time as(
      select r.runner_id, 
     	r.pickup_time::timestamp -c.order_time::timestamp diff
      from pizza_runner.customer_orders c
      join pizza_runner.runner_orders r
      on c.order_id = r.order_id
    )
    select runner_id, avg(extract(minute from diff)::decimal +
    extract(second from diff)/60::decimal )min_diff
    from order_time 
    group by runner_id
    order by runner_id ;

| runner_id | min_diff           |
| --------- | ------------------ |
| 1         | 15.677777777777777 |
| 2         | 23.720000000000002 |
| 3         | 10.466666666666667 |

---
**Query #8**

    with cte as(
      select  c.order_id,
     	cast(r.pickup_time::timestamp -c.order_time::timestamp as time) diff,
      count(*)
      from pizza_runner.customer_orders c
      join pizza_runner.runner_orders r
      on c.order_id = r.order_id
      group by c.order_id, diff
    )
    
    select count, cast(avg(diff) as time)
    from cte
    where diff is not null
    group by count
    order by count;

| count | avg        |
| ----- | ---------- |
| 1     | 00:12:21.4 |
| 2     | 00:18:22.5 |
| 3     | 00:29:17   |

---
**Query #9**

    with cte as(
      select  c.order_id,
     	cast(r.pickup_time::timestamp -c.order_time::timestamp as time) diff,
      count(*)
      from pizza_runner.customer_orders c
      join pizza_runner.runner_orders r
      on c.order_id = r.order_id
      group by c.order_id, diff
    )
    
    select * 
    from cte
    where diff is not null;

| order_id | diff     | count |
| -------- | -------- | ----- |
| 4        | 00:29:17 | 3     |
| 3        | 00:21:14 | 2     |
| 7        | 00:10:16 | 1     |
| 2        | 00:10:02 | 1     |
| 10       | 00:15:31 | 2     |
| 5        | 00:10:28 | 1     |
| 1        | 00:10:32 | 1     |
| 8        | 00:20:29 | 1     |

---
**Query #10**

    update pizza_runner.runner_orders 
        set distance = 0
        where distance ='null';

There are no results to be displayed.

---
**Query #11**

    alter table pizza_runner.runner_orders 
    alter column distance type numeric using distance::numeric
    ;

There are no results to be displayed.

---
**Query #12**

    select c.customer_id, round(avg(distance),3) 
    from pizza_runner.runner_orders r 
    join pizza_runner.customer_orders c
    on r.order_id = c.order_id
    where distance != 0 
    group by c.customer_id;

| customer_id | round  |
| ----------- | ------ |
| 101         | 20.000 |
| 103         | 23.400 |
| 104         | 10.000 |
| 105         | 25.000 |
| 102         | 16.733 |

---
**Query #13**

    select cast(max(duration) as integer) - cast(min(duration) as integer) diff_longest_between_shortest
    from pizza_runner.runner_orders ;

| diff_longest_between_shortest |
| ----------------------------- |
| 30                            |

---
**Query #14**

    select runner_id, round(avg(duration),2) avg_time, round(avg(distance)) avg_distance 
    from pizza_runner.runner_orders
    where duration != 0 
    group by runner_id 
    order by runner_id 
    ;

| runner_id | avg_time | avg_distance |
| --------- | -------- | ------------ |
| 1         | 22.25    | 16           |
| 2         | 26.67    | 24           |
| 3         | 15.00    | 10           |

---
**Query #15**

    with cte as (
    select runner_id, sum(case when cancellation is null then 1 else 0 end)succ,sum(case when cancellation is null or cancellation is not null then 1 else 0 end) total
    from pizza_runner.runner_orders
    group by runner_id 
    order by runner_id )
    
    select runner_id, round(cast(succ as decimal)/cast(total as decimal)*100,2) as succ_del_perc
    from cte 
    order by runner_id;

| runner_id | succ_del_perc |
| --------- | ------------- |
| 1         | 100.00        |
| 2         | 75.00         |
| 3         | 50.00         |

---

--- Part C ----
-- use MySql --

    CREATE SCHEMA pizza_runner;
    
    
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      runner_id INTEGER,
      registration_date DATE
    );
    INSERT INTO runners
      (runner_id, registration_date)
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      order_id INTEGER,
      customer_id INTEGER,
      pizza_id INTEGER,
      exclusions VARCHAR(4),
      extras VARCHAR(4),
      order_time TIMESTAMP
    );
    
    INSERT INTO customer_orders
      (order_id, customer_id, pizza_id, exclusions, extras, order_time)
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      order_id INTEGER,
      runner_id INTEGER,
      pickup_time VARCHAR(19),
      distance VARCHAR(7),
      duration VARCHAR(10),
      cancellation VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      (order_id, runner_id, pickup_time, distance, duration, cancellation)
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      pizza_id INTEGER,
      pizza_name TEXT
    );
    INSERT INTO pizza_names
      (pizza_id, pizza_name)
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      pizza_id INTEGER,
      toppings TEXT
    );
    INSERT INTO pizza_recipes
      (pizza_id, toppings)
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      topping_id INTEGER,
      topping_name TEXT
    );
    INSERT INTO pizza_toppings
      (topping_id, topping_name
      )
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    update customer_orders 
            set exclusions = nullif(nullif(exclusions, ''),'null'),
            	extras = nullif(nullif(extras, ''),'null');

There are no results to be displayed.

---
**Query #2**

    select * 
    from pizza_recipes;

| pizza_id | toppings                |
| -------- | ----------------------- |
| 1        | 1, 2, 3, 4, 5, 6, 8, 10 |
| 2        | 4, 6, 7, 9, 11, 12      |

---
**Query #3**

    create table pizza_toppings_match(
     	 pizza_id INTEGER, 
       	 toppings INTEGER );

There are no results to be displayed.

---
**Query #4**

    Insert into pizza_toppings_match(pizza_id,toppings)
     Values 
     (1,1),
     (1,2),
     (1,3),
     (1,4),
     (1,5),
     (1,6),
     (1,8),
     (1,10),
     (2,4),
     (2,6),
     (2,7),
     (2,9),
     (2,11),
     (2,12);

There are no results to be displayed.

---
**Query #5**

    select pizza_id, group_concat(topping_name) toppings
     from pizza_toppings_match m
     join pizza_toppings t
     on t.topping_id = m.toppings 
     group by pizza_id ;

| pizza_id | toppings                                                       |
| -------- | -------------------------------------------------------------- |
| 1        | Bacon,BBQ Sauce,Beef,Cheese,Chicken,Mushrooms,Pepperoni,Salami |
| 2        | Cheese,Mushrooms,Onions,Peppers,Tomatoes,Tomato Sauce          |

---
**Query #6**

    with list_extras as(
     (select substring_index(extras,',',1) first_extra
     from customer_orders
     where substring_index(extras,',',1) is not null )
     union all
     (select 
     case when length(extras) >1 then substring_index(extras,',',-1) 
     else null end as second_extra
     from customer_orders 
     where substring_index(extras,',',-1) is not null ))
     
     select topping_name extra_topping, count(*)  count
     from list_extras l
     join pizza_toppings  t
     on l.first_extra = t.topping_id
     where first_extra is not null 
     group by topping_name
     order by count desc;

| extra_topping | count |
| ------------- | ----- |
| Bacon         | 4     |
| Chicken       | 1     |
| Cheese        | 1     |

---
**Query #7**

    select length(exclusions) from customer_orders ;

| length(exclusions) |
| ------------------ |
|                    |
|                    |
|                    |
|                    |
| 1                  |
| 1                  |
| 1                  |
|                    |
|                    |
|                    |
|                    |
| 1                  |
|                    |
| 4                  |

---
**Query #8**

    with list_exclu as(
     (select substring_index(exclusions,',',1) exclu
     from customer_orders
     where substring_index(exclusions,',',1) is not null )
     union all
     (select 
     case when length(exclusions) >1 then substring_index(exclusions,',',-1) 
     else null end as exclu
     from customer_orders 
     where substring_index(exclusions,',',-1) is not null ))
     
     select topping_name exclu_topping, count(*)  count
     from list_exclu l
     join pizza_toppings  t
     on l.exclu = t.topping_id
     where exclu is not null 
     group by topping_name
     order by count desc;

| exclu_topping | count |
| ------------- | ----- |
| Cheese        | 4     |
| BBQ Sauce     | 1     |
| Mushrooms     | 1     |

---
**Query #9**

    with cte as (
     select order_id, customer_id, pizza_name,substring_index(exclusions,',',1) exclu1, case when length(exclusions) >1 then substring_index(exclusions,',',-1) else null end exclu2, substring_index(extras,',',1)extra1,case when length(extras)>1 then  substring_index(extras,',',-1) else null end as extra2  
     from customer_orders c
     join pizza_names n
     on c.pizza_id = n.pizza_id
     )
     select customer_id,  concat(pizza_name,coalesce(concat(' - Exclude ', a.topping_name,''),''),coalesce(concat(' - Extra ',c.topping_name),''),coalesce(concat(' ',d.topping_name),''))order_detail
     from cte t
     left join pizza_toppings a
     on t.exclu1 = a.topping_id 
    left join pizza_toppings b
     on t.exclu2= b.topping_id 
     left join pizza_toppings c
     on t.extra1= c.topping_id 
     left join pizza_toppings d
     on t.extra2= d.topping_id;

| customer_id | order_detail                                       |
| ----------- | -------------------------------------------------- |
| 101         | Meatlovers                                         |
| 101         | Meatlovers                                         |
| 102         | Meatlovers                                         |
| 102         | Vegetarian                                         |
| 103         | Meatlovers - Exclude Cheese                        |
| 103         | Meatlovers - Exclude Cheese                        |
| 103         | Vegetarian - Exclude Cheese                        |
| 104         | Meatlovers- Extra Bacon                            |
| 101         | Vegetarian                                         |
| 105         | Vegetarian- Extra Bacon                            |
| 102         | Meatlovers                                         |
| 103         | Meatlovers - Exclude Cheese- Extra Bacon Chicken   |
| 104         | Meatlovers                                         |
| 104         | Meatlovers - Exclude BBQ Sauce- Extra Bacon Cheese |

---
with cte as (
     select order_id, 
   customer_id, 
   c.pizza_id,
   pizza_name,
   toppings,
   substring_index(exclusions,',',1) exclu1,
   case when length(exclusions) >1 then substring_index(exclusions,',',-1) else null end exclu2, 
 substring_index(extras,',',1)extra1,
  case when length(extras)>1 then substring_index(extras,',',-1) else null end extra2
     from customer_orders c
     join pizza_recipes r
     on c.pizza_id = r.pizza_id
   	join pizza_names n
   on c.pizza_id = n.pizza_id
)
select *, 
concat((case when exclu2 is not null then replace((case when exclu1 is not null then replace(toppings, exclu1, '') else toppings end), exclu2, '') else (case when exclu1 is not null then replace(toppings, exclu1, '') else toppings end) end), ', ',case when exclu1 is not null then exclu1 else ''end,case when exclu2 is not null then concat(',',exclu2) else ''end)    
from cte 
 

     
[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/65)
