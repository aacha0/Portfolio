**Schema (PostgreSQL v13)**

    CREATE SCHEMA dannys_diner;
    SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---

**Query #1**

    select customer_id, sum(m.price) total_spending
    from dannys_diner.sales s
    join dannys_diner.menu m
    on s.product_id = m.product_id
    group by customer_id 
    order by customer_id ;

| customer_id | total_spending |
| ----------- | -------------- |
| A           | 76             |
| B           | 74             |
| C           | 36             |

---
**Query #2**

    select customer_id, count(distinct order_date) total_visits
    from dannys_diner.sales s
    join dannys_diner.menu m
    on s.product_id = m.product_id
    group by customer_id 
    order by customer_id ;

| customer_id | total_visits |
| ----------- | ------------ |
| A           | 4            |
| B           | 6            |
| C           | 2            |

---
**Query #3**

    with rank_order as(
    select customer_id, m.product_name, 
    dense_rank()over(partition by customer_id order by order_date) rank
    from dannys_diner.sales s
    join dannys_diner.menu m
    on s.product_id = m.product_id
    order by customer_id)
    
    select customer_id, product_name
    from rank_order
    where rank = 1 
    group by customer_id,product_name;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| A           | sushi        |
| B           | curry        |
| C           | ramen        |

---
**Query #4**

    select product_name most_popular, count(*)
    from dannys_diner.sales s
    join dannys_diner.menu m
    on s.product_id = m.product_id
    group by product_name
    order by count(*) desc 
    limit 1 ;

| most_popular | count |
| ------------ | ----- |
| ramen        | 8     |

---
**Query #5**

    with cte as (
      select customer_id, product_name,count(product_name) count,
      dense_rank() over(partition by customer_id order by count(product_name)desc) rank
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      group by customer_id, product_name)
    select customer_id, product_name, count 
    from cte
    where rank = 1;

| customer_id | product_name | count |
| ----------- | ------------ | ----- |
| A           | ramen        | 3     |
| B           | ramen        | 2     |
| B           | curry        | 2     |
| B           | sushi        | 2     |
| C           | ramen        | 3     |

---
**Query #6**

    with members_order as(
      select s.customer_id, order_date, join_date, product_name,
      rank()over(partition by s.customer_id order by order_date) rank
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      join dannys_diner.members mb
      on mb.customer_id = s.customer_id 
      where order_date >=join_date
      )
    select customer_id, product_name
    from members_order
    where rank =1 ;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| B           | sushi        |

---
**Query #7**

    with members_order as(
      select s.customer_id, order_date, join_date, product_name,
      rank()over(partition by s.customer_id order by order_date desc) rank
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      join dannys_diner.members mb
      on mb.customer_id = s.customer_id 
      where order_date <join_date
      )
    select customer_id, product_name
    from members_order
    where rank =1 ;

| customer_id | product_name |
| ----------- | ------------ |
| A           | sushi        |
| A           | curry        |
| B           | sushi        |

---
**Query #8**

    select s.customer_id,sum(price)
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      join dannys_diner.members mb
      on mb.customer_id = s.customer_id 
      where order_date <join_date
      group by s.customer_id 
      order by customer_id ;

| customer_id | sum |
| ----------- | --- |
| A           | 25  |
| B           | 40  |

---
**Query #9**

    select s.customer_id,
    sum(case when product_name = 'sushi' then price*20
    	else price*10 
        end) total_points  
    from dannys_diner.sales s
    join dannys_diner.menu m
    on s.product_id = m.product_id
    group by customer_id 
    order by customer_id ;

| customer_id | total_points |
| ----------- | ------------ |
| A           | 860          |
| B           | 940          |
| C           | 360          |

---
**Query #10**

    with time as (
      select s.customer_id, product_name, price, cast(join_date as date), join_date+6 last_date, cast(order_date as date)
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      join dannys_diner.members mb
      on mb.customer_id = s.customer_id) 
     
     select customer_id,
     sum(case when product_name = 'sushi' or order_date between join_date nd last_date then price*20
         else price*10 end)as total_poins
     from time 
     where date_trunc('month', order_date) = '2021-01-01'
     group by customer_id
     order by customer_id ;

| customer_id | total_poins |
| ----------- | ----------- |
| A           | 1370        |
| B           | 820         |

---
**Query #11**

    with member as (
      select s.customer_id, product_name, price, join_date, order_date
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      left join dannys_diner.members mb
      on mb.customer_id = s.customer_id) 
    
    select customer_id, order_date, product_name, price, 
    case when join_date > order_date or join_date is null then 'N'
    else 'Y' end as member_status
    from member
    order by customer_id, order_date ;

| customer_id | order_date               | product_name | price | member_status |
| ----------- | ------------------------ | ------------ | ----- | ------------- |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 10    | N             |
| A           | 2021-01-01T00:00:00.000Z | curry        | 15    | N             |
| A           | 2021-01-07T00:00:00.000Z | curry        | 15    | Y             |
| A           | 2021-01-10T00:00:00.000Z | ramen        | 12    | Y             |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y             |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y             |
| B           | 2021-01-01T00:00:00.000Z | curry        | 15    | N             |
| B           | 2021-01-02T00:00:00.000Z | curry        | 15    | N             |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 10    | N             |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 10    | Y             |
| B           | 2021-01-16T00:00:00.000Z | ramen        | 12    | Y             |
| B           | 2021-02-01T00:00:00.000Z | ramen        | 12    | Y             |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N             |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N             |
| C           | 2021-01-07T00:00:00.000Z | ramen        | 12    | N             |

---
**Query #12**

    with member as (
      select s.customer_id, product_name, price, join_date, order_date,
      case when join_date > order_date or join_date is null then 'N'
    	else 'Y' end as member_status
      from dannys_diner.sales s
      join dannys_diner.menu m
      on s.product_id = m.product_id
      left join dannys_diner.members mb
      on mb.customer_id = s.customer_id
      order by customer_id, order_date) 
    select customer_id, order_date, product_name, price, member_status,
    case when member_status = 'N' then null
    else dense_rank() over(partition by customer_id,member_status order by order_date) end as ranking
    from member;

| customer_id | order_date               | product_name | price | member_status | ranking |
| ----------- | ------------------------ | ------------ | ----- | ------------- | ------- |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 10    | N             |         |
| A           | 2021-01-01T00:00:00.000Z | curry        | 15    | N             |         |
| A           | 2021-01-07T00:00:00.000Z | curry        | 15    | Y             | 1       |
| A           | 2021-01-10T00:00:00.000Z | ramen        | 12    | Y             | 2       |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y             | 3       |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y             | 3       |
| B           | 2021-01-01T00:00:00.000Z | curry        | 15    | N             |         |
| B           | 2021-01-02T00:00:00.000Z | curry        | 15    | N             |         |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 10    | N             |         |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 10    | Y             | 1       |
| B           | 2021-01-16T00:00:00.000Z | ramen        | 12    | Y             | 2       |
| B           | 2021-02-01T00:00:00.000Z | ramen        | 12    | Y             | 3       |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N             |         |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N             |         |
| C           | 2021-01-07T00:00:00.000Z | ramen        | 12    | N             |         |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/5757)
